import asyncio
import datetime
import random
import sqlite3
from aiogram import types, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram import Router
from aiogram.filters import CommandStart, Command, CommandObject
from app.states import NoteStates
from aiogram.fsm.context import FSMContext
import app.keyboard as kb

router = Router()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("Note.db")
cursor = conn.cursor()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–±–æ—Ç –∑–∞–ø—É—â–µ–Ω", reply_markup=kb.keyboard_reply
    )


@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É")
async def start_note_creation(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(NoteStates.waiting_for_title)


@router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏")
async def view_note(message: Message, state: FSMContext):
    await message.answer("–í—Å–µ –∑–∞–º–µ—Ç–∫–∏:", reply_markup=ReplyKeyboardRemove())

    cursor.execute("SELECT id, title, description, is_remind, remind_at FROM Note")
    notes = cursor.fetchall()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–º–µ—Ç–∫–∏
    if notes:
        for note in notes:
            note_id, title, description, is_remind, remind_at = note
            remind_text = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {'–¥–∞' if is_remind else '–Ω–µ—Ç'}"
            remind_at_text = f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {remind_at}" if remind_at else "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

            note_text = f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n{remind_text}\n{remind_at_text}"
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–º–µ—Ç–∫–∏
            await message.answer(note_text, reply_markup=kb.get_note_inline_keyboard(note_id))
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.", reply_markup=kb.keyboard_reply)

@router.callback_query(lambda callback: callback.data.startswith("edit_note:"))
async def edit_note_callback(callback: types.CallbackQuery, state: FSMContext):
    note_id = int(callback.data.split(":")[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –∑–∞–º–µ—Ç–∫–∏ –≤ FSM
    await state.update_data(note_id=note_id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏:")
    await state.set_state(NoteStates.waiting_for_title)
    await callback.answer()

@router.message(NoteStates.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:")
    await state.set_state(NoteStates.waiting_for_description)

@router.message(NoteStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(NoteStates.waiting_for_remind_confirmation)

@router.message(NoteStates.waiting_for_remind_confirmation)
async def process_remind_confirmation(message: Message, state: FSMContext):
    remind_text = message.text.lower()
    if remind_text in ["–¥–∞", "–Ω–µ—Ç"]:
        is_remind = remind_text == "–¥–∞"
        await state.update_data(is_remind=is_remind)

        if is_remind:
            await message.answer("–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç—å?")
            await state.set_state(NoteStates.waiting_for_remind_time)
        else:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
            await update_note_in_db(state, message)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")

@router.message(NoteStates.waiting_for_remind_time)
async def process_remind_time(message: Message, state: FSMContext):
    try:
        remind_minutes = int(message.text)
        remind_at = datetime.datetime.now() + datetime.timedelta(minutes=remind_minutes)
        await state.update_data(remind_at=remind_at)

        await update_note_in_db(state, message)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")


async def update_note_in_db(state: FSMContext, message: Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()
    note_id = data["note_id"]
    title = data["title"]
    description = data["description"]
    is_remind = data["is_remind"]
    remind_at = data.get("remind_at", None)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(
        "UPDATE Note SET title = ?, description = ?, is_remind = ?, remind_at = ? WHERE id = ?",
        (title, description, is_remind, remind_at, note_id)
    )
    conn.commit()

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=kb.keyboard_reply)
    await state.clear()

@router.callback_query(lambda callback: callback.data.startswith("delete_note:"))
async def delete_note_callback(callback: types.CallbackQuery):
    note_id = int(callback.data.split(":")[1])

    # –£–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("DELETE FROM Note WHERE id = ?", (note_id,))
    conn.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    await callback.message.edit_text("–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
    await callback.answer("–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)


@router.message(NoteStates.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:")
    await state.set_state(NoteStates.waiting_for_description)


@router.message(NoteStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–ª –æ–± —ç—Ç–æ–π –∑–∞–º–µ—Ç–∫–µ? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(NoteStates.waiting_for_remind_confirmation)


@router.message(NoteStates.waiting_for_remind_confirmation)
async def process_remind_confirmation(message: Message, state: FSMContext):
    remind_text = message.text.lower()
    if remind_text in ["–¥–∞", "–Ω–µ—Ç"]:
        is_remind = remind_text == "–¥–∞"
        await state.update_data(is_remind=is_remind)

        if is_remind:
            await message.answer("–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç—å?")
            await state.set_state(NoteStates.waiting_for_remind_time)
        else:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            await save_note_in_db(state, message)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")


@router.message(NoteStates.waiting_for_remind_time)
async def process_remind_time(message: Message, state: FSMContext):
    try:
        remind_minutes = int(message.text)
        remind_at = datetime.datetime.now() + datetime.timedelta(minutes=remind_minutes)
        await state.update_data(remind_at=remind_at)

        await save_note_in_db(state, message)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")


async def save_note_in_db(state: FSMContext, message: Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()
    title = data["title"]
    description = data["description"]
    is_remind = data["is_remind"]
    remind_at = data.get("remind_at", None)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(
        "INSERT INTO Note (title, description, is_remind, remind_at) VALUES (?, ?, ?, ?)",
        (title, description, is_remind, remind_at)
    )
    conn.commit()

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ FSM –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=kb.keyboard_reply)
    await state.clear()
